=head1 NAME

SDLx::Particle::* - quick and easy particle systems

=head1 SYNOPSIS

  use SDLx::Sprite;
  use SDLx::Particle; #defines the particles
  use SDLx::Particle::Manipulator; #defines the particle behaviours
  use SDLx::Particle::Emitter; #defines the emitter of the particles
  use SDLx::Widget::PSystem; #Lets the controller animate and update
  
  my $sparkles = SDLx::Particle->( 
		type => 'pixel', # 'circle' or 'sprite'
		death => 0.01, #death in ms
		colors => [ 0xFF0000, 0x00FF00, 0x0000FF ],
		behaviour => 'death_linked' # as the particle ages it goes from red to green
		);
		
  my $gravity = SDLx::Particle::Manipulator->
		{
		 type => 'gravity', #can add more like 'vortex' so on
		 velocity => [ 0.1, -0.2 ], #x and y velocity per tick
		 rand => '0.01', #adds a random * vx to velocity
		};

  my $wand = SDLx::Sprite->load('wand.png');
  
  my $wand_emiter = SDLx::Particle::Emitter->hook($wand, 2, 10); #where on the sprite to emit from.
  
  my $sparkling_ps = SDLx::Widget::PSystem->new( 
		     emitters => [$wand_emmiter],
		     manipulators  => [$gravity],
		     particles => [$sparkles]
		     );
		
		
   $sparkling_ps->update($dt);  #these work with SDLx::Widget::Controller
   $sparkling_ps->draw(); 
   
   #other methods?
   
   $sparkling_ps->stop_emmiter('ALL'); # ??? what else should we have here
   $sparkling_ps->kill_particles('ALL');
   
 =cut
